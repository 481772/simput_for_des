/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.1                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
{{#each hexMesh.steps}}
{{{this}}} true;
{{/each}}

// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    {{{hexMesh.geometry.name}}}.obj
    {
        type triSurfaceMesh;
        name {{{hexMesh.geometry.name}}};
    }

    refinementBox
    {
        type {{{hexMesh.geometry.refinementBox.type}}};
        min ({{{[../vector] hexMesh.geometry.refinementBox.min}}});
        max ({{{[../vector] hexMesh.geometry.refinementBox.max}}});
    }
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells {{{hexMesh.castellatedMeshControls.maxLocalCells}}};

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells {{{hexMesh.castellatedMeshControls.maxGlobalCells}}};

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells {{{hexMesh.castellatedMeshControls.minRefinementCells}}};

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance {{{hexMesh.castellatedMeshControls.maxLoadUnbalance}}};


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels {{{hexMesh.castellatedMeshControls.nCellsBetweenLevels}}};



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        {
            file "{{{hexMesh.geometry.name}}}.eMesh";
            level 6;
        }
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        {{{hexMesh.geometry.name}}}
        {
            // Surface-wise min and max refinement level
            level (5 6);

            // Optional specification of patch type (default is wall). No
            // constraint types (cyclic, symmetry) etc. are allowed.
            patchInfo
            {
                type wall;
                inGroups ({{{meshGroupName}}});
            }
        }
    }

    // Resolve sharp angles
    resolveFeatureAngle {{{hexMesh.castellatedMeshControls.resolveFeatureAngle}}};


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        refinementBox
        {
            mode inside;
            levels ((1E15 4));
        }
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh ({{{[../vector] hexMesh.castellatedMeshControls.locationInMesh}}});


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces {{{hexMesh.castellatedMeshControls.allowFreeStandingZoneFaces}}};
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch {{{hexMesh.snapControls.nSmoothPatch}}};

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance {{{hexMesh.snapControls.tolerance}}};

    //- Number of mesh displacement relaxation iterations.
    nSolveIter {{{hexMesh.snapControls.nSolveIter}}};

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter {{{hexMesh.snapControls.nRelaxIter}}};

    // Feature snapping

        //- Number of feature edge snapping iterations.
        //  Leave out altogether to disable.
        nFeatureSnapIter {{{hexMesh.snapControls.nFeatureSnapIter}}};

        //- Detect (geometric only) features by sampling the surface
        //  (default=false).
        implicitFeatureSnap {{{hexMesh.snapControls.implicitFeatureSnap}}};

        //- Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap {{{hexMesh.snapControls.explicitFeatureSnap}}};

        //- Detect points on multiple surfaces (only for explicitFeatureSnap)
        multiRegionFeatureSnap {{{hexMesh.snapControls.multiRegionFeatureSnap}}};
}



// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes {{{hexMesh.addLayersControls.relativeSizes}}};

    // Per final patch (so not geometry!) the layer information
    layers
    {
        "(bottomWall|{{{hexMesh.geometry.name}}}).*"
        {
            nSurfaceLayers 1;
        }
    }

    // Expansion factor for layer mesh
    expansionRatio {{{hexMesh.addLayersControls.expansionRatio}}};

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness {{{hexMesh.addLayersControls.finalLayerThickness}}};

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness {{{hexMesh.addLayersControls.minThickness}}};

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow {{{hexMesh.addLayersControls.nGrow}}};

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle {{{hexMesh.addLayersControls.featureAngle}}};

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle {{{hexMesh.addLayersControls.slipFeatureAngle}}};

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter {{{hexMesh.addLayersControls.nRelaxIter}}};

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals {{{hexMesh.addLayersControls.nSmoothSurfaceNormals}}};

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals {{{hexMesh.addLayersControls.nSmoothNormals}}};

    // Smooth layer thickness over surface patches
    nSmoothThickness {{{hexMesh.addLayersControls.nSmoothThickness}}};

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio {{{hexMesh.addLayersControls.maxFaceThicknessRatio}}};

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio {{{hexMesh.addLayersControls.maxThicknessToMedialRatio}}};

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.
    minMedianAxisAngle {{{hexMesh.addLayersControls.minMedianAxisAngle}}};


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude {{{hexMesh.addLayersControls.nBufferCellsNoExtrude}}};


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter {{{hexMesh.addLayersControls.nLayerIter}}};
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"


    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- Amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Write flags
writeFlags
(
    scalarLevels
    layerSets
    layerFields     // write volScalarField for layer coverage
);


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;


// ************************************************************************* //
